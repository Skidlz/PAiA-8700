                        ;*********************************
                        ;*                               *
                        ;*              MUS1             *
                        ;*                               *
                        ;*        BY JOHN SIMONTON       *
                        ;*(C) 1978 - PAIA ELECTRONICS,INC*
                        ;*     ALL RIGHTS RESERVED       *
                        ;*                               *
                        ;*                               *
                        ;*    SYNTHESIZER SUBROUTINES    *
                        ;*          ++ AND ++            *
                        ;*   MULTIPLE OPTION POLYPHONIC  *
                        ;*    ALLOCATION PROGRAM WITH    *
                        ;*      SOFTWARE TRANSIENT       *
                        ;*          GENERATION           *
                        ;*                               *
                        ;*********************************
                        ;           OPTN
                        ;POLYPHONIC SYNTHESIZER / OPTION
                        ;        SELECTION
                        ;*********************************
                        ;
                        ;
                        ;INIT 	=$0D21
                        ;POLY	=$0D71
                        ;TRGN	=$0DC3
                        ;NOTE	=$0D2B
0f00 =                  DECD	=$0F00
                        ;FILL	=$0D52
0820 =                  DISP	=$0820
00bf =                  CLCK	=$00BF
                        ;
                        ;OPTION TIES MUS1 FIRMWARE
                        ;TOGETHER INTO A POLYPHONIC SYNTH
                        ;WITH OR WITHOUT TRANSIENT GENER-
                        ;TION, W/WO DYNAMIC QUASH DRIVERS
                        ;
                        ;ALSO USES PIEBUG DECODE AND
                        ;ASSIGNS KEY #0 AS SYSTEM CLEAR
                        ;AND #1 AS TUNE - EQUIVALENT TO
                        ;ALL CHANNELS 2ND "C" on KBD DOWN
                        ;
0d00 =                  	org	$0D00
0d00 : 20210d           OPTN	jsr	INIT	;ZERO ALL BUFFS
0d03 : 20710d           LOOP	jsr	POLY	;ALLOCATE CHANS
0d06 : 20c30d           		jsr	TRGN	;NEW TRANSIENTS
0d09 : 202b0d           		jsr	NOTE	;OUTPUT-READ AGO
0d0c : a5bf             		lda	CLCK	;GET CLOCK VALUE
0d0e : 8d2008           		sta	DISP	;RAZZ-MA-TAZZ
0d11 : 20000f           		jsr	DECD	;CHECK COMMANDS
0d14 : c901             		cmp	#$01	;0? 1? >1?
0d16 : 30e8             		bmi	OPTN	;0 CLEAR ALL
0d18 : d0e9             		bne	LOOP	;>1 KEEP ON
0d1a : a05c             		ldy	#$5C	;1 TUNE 2ND C
0d1c : 20520d           		jsr	FILL	;KEYS ALL DOWN
0d1f : f0e2             		beq	LOOP	;BRANCH ALWAYS
                        ;
                        ;         INIT
                        ;  INITIALIZATION ROUTINE
                        ;******************************
                        ;
00e8 =                  CTRL	=$00E8
00bf =                  TBEG	=$00BF
                        ;INIT CLEARS INPUT BUFFER (KTBL)
                        ;OUTPUT BUFFER (NTBL) AND TRANS-
                        ;POSE BUFFER/CONTROL WORDS (TTBL)
                        ;HEXADECIMAN MODE IS SELECTED
                        ;
                        ;ENTER AT INT0 TO FILL TABLES
                        ;WITH CHARACTER FROM ACCUMULATOR
                        ;
0d21 : a900             INIT	lda	#$00	;PREPARE TO ZERO
0d23 : a228             INT0	ldx	#$28	;SET POINT/COUNT
0d25 : d8               		cld			;SET HEX MODE
0d26 : 95bf             INT1	sta	TBEG,x	;ZERO BUFFER
0d28 : ca               		dex			;POINT TO NEXT
0d29 : d0fb             		bne	INT1	;SOME LEFT -LOOP
                        ;
                        ;       NOTEOUT/LOOK
                        ;16 CHANNEL QUASH DRIVERS AND AGO
                        ;   KEYBOARD READING ROUTINE
                        ;
                        ;********************************
                        ;
                        ;CTRL	=$00E8
00e9 =                  ODLY	=$00E9
00df =                  KTBL	=$00DF
00cf =                  NTBL	=$00CF
00bf =                  TTBL	=$00BF	;ALSO CLCK
00a9 =                  LAST	=$00A9
09ef =                  SH	=$09EF
0900 =                  DA	=$0900
0810 =                  KBD	=$0810
                        ;
                        ;       *** NOTEOUT ***
                        ;    DYNAMIC QUASH DRIVER
                        ;GETS NOTES TO BE PLAYED FROM THE
                        ;OUTPUT BUFFER (NTBL) AND ADDS
                        ;TRANSPOSING VALUE FROM TRANSPOSE
                        ;BUFFER (TTBL) OUTPUTS RESULT
                        ;
0d2b : a210             NOTE	ldx	#$10	;SET POINTER
0d2d : b5cf             NO0		lda	NTBL,x	;GET NOTE
0d2f : 18               		clc			;PREPARE AND
0d30 : 75bf             		adc	TTBL,x	;ADD TRANSPOSE
0d32 : 8d0009           		sta	DA		;LET D/A SETTLE
0d35 : 9def09           		sta	SH,x	;WRITE TO S/H
                        ;
                        ;NOW THE DYNAMIC PART, IF GLIDE
                        ;IS ON, DELAY IS SKIPPED. IF NOTE
                        ;IS SAME AS LAST PLAYED (IGNORING
                        ;CONTROL BITS D6 D7) DELAY IS
                        ;SKIPPED.  IF NOT IN DYNAMIC MODE
                        ;AND NO GLIDE, DELAY ALWAYS TAKEN
                        ;
0d38 : 300f             		bmi	NO2		;GLIDE? NO DELAY
0d3a : 0980             		ora	#$80	;IGNORE FLAGS
0d3c : 24e8             		bit	CTRL	;DYNAMIC MODE ?
0d3e : 5004             		bvc	DLAY	;NO, JMP TO DELAY
0d40 : d5a9             		cmp	LAST,x	;COMPARE TO LAST
0d42 : f005             		beq	NO2		;SAME:SKIP DELAY
0d44 : a4e9             DLAY	ldy	ODLY	;GET DELAY VALUE
0d46 : 88               NO1		dey			;DECREMENT DELAY
0d47 : d0fd             		bne	NO1		;LOOP TIL DONE
0d49 : 95a9             NO2		sta	LAST,x	;FOR NEXT TIME
0d4b : ca               		dex			;POINT TO NEXT
0d4c : d0df             		bne	NO0		;SOME LEFT -LOOP
                        ;
                        ;LOOK WAITS FOR THE BEGINNING OF
                        ;AN "ACTIVE" SCAN-BEGINS PUTTING
                        ;THE NUMBERS OF KEYS DOWN IN SE-
                        ;QUENTIAL IN-BUFF WORDS.  WHEN
                        ;SCAN DONE REMAINING IN-BUFF IS
                        ;ZERO'D
                        ;
0d4e : e6bf             LOOK	inc	TTBL	;INCREMENT CLOCK
0d50 : a000             		ldy	#$00	;PREPARE FOR CLR
0d52 : a208             FILL	ldx	#$08	;SET UP POINTER
0d54 : ad1008           LK2		lda	KBD		;WAIT FOR
0d57 : 30fb             		bmi	LK2		;"ACTIVE" SCAN
0d59 : ad1008           LK3		lda	KBD		;GET KEY
0d5c : 300f             		bmi	DONE	;END SCAN? -CLR
0d5e : 2a               		rol	a		;STROBE TO D7
0d5f : 10f8             		bpl	LK3		;D7=0, NO STROBE
0d61 : 6a               		ror	a		;RESTORE DATA
0d62 : 95df             		sta	KTBL,x	;TO IN BUFFER
0d64 : cd1008           LK4		cmp	KBD		;NOW WAIT FOR
0d67 : f0fb             		beq	LK4		;NEXT KEY
0d69 : ca               LK0		dex			;PNT TO NEXT BUF
0d6a : d0ed             		bne	LK3		;SOME LEFT -LOOP
0d6c : 60               		rts			;LEAVE
0d6d : 94df             DONE	sty	KTBL,x	;ZERO IN-BUFFER
0d6f : 30f8             		bmi	LK0		;BRANCH ALWAYS
                        ;
                        ;          POLY
                        ; A LIMITED RESOURCE ALLOCATION
                        ;        ALGORYTHM
                        ;********************************
                        ;
00eb =                  OUTT	=$00EB
00ea =                  OUTS	=$00EA
                        ;CTRL	=$00E8
                        ;KTBL	=$00DF
                        ;NTBL	=$00CF
                        ;
                        ;POLY-FIRST HALF OF ALGORHYTHM
                        ;IN THIS BLOCK DE-ACTIVATED CHANS
                        ;ARE REACTIVATED IF THE DATA THEY
                        ;CONTAIN APPEARS IN THE IN BUFFER
                        ;
                        ;D7 IN CTRL SET - ALTERNATE MODE
                        ;D7 "   "   CLR - SEQUENTIAL MODE
                        ;
0d71 : a5ea             POLY	lda	OUTS	;# OD OUT CHANS
0d73 : 85eb             		sta	OUTT	;USE AS COUNTER
0d75 : a210             		ldx	#$10	;PREPARE PNT/CNT
0d77 : b5cf             POL0	lda	NTBL,x	;GET NOTE
0d79 : f027             		beq	NWKY	;0-OLD KEYS DONE
0d7b : 297f             		and	#$7F	;CLEAR D7
0d7d : 0940             		ora	#$40	;SET D6
0d7f : a009             		ldy	#$09	;PREPARE PNT/CNT
0d81 : 88               LP0		dey			;POINT NEXT KEY
0d82 : f012             		beq	NEXT1	;DONE -NEXT NOTE
0d84 : d9df00           		cmp	KTBL,y	;SAME AS KEY?
0d87 : d0f8             		bne	LP0		;NO -NEXT KEY
0d89 : 95cf             		sta	NTBL,x	;SAVE NOTE D6=1
0d8b : c6eb             		dec	OUTT	;ONE LESS OUTPUT
0d8d : f033             		beq	OUT		;NONE LEFT-LEAVE
0d8f : a900             		lda	#$00	;OR PREPARE AND
0d91 : 99df00           		sta	KTBL,y	;ELIMINATE KEY
0d94 : f004             		beq	LP1		;& BRANCH ALWAYS
0d96 : 29bf             NEXT1	and	#$BF	;CLEAR TRIG (DG6)
0d98 : 95cf             		sta	NTBL,x	;& RESTORE NOTE
0d9a : 24e8             LP1		bit	CTRL	;ALTERNATE MODE?
0d9c : 1001             		bpl	SKP1	;NO -DEC ONCE
0d9e : ca               		dex			;YES-DEC TWICE
0d9f : ca               SKP1	dex			;POINT NEXT NOTE
0da0 : d0d5             		bne	POL0	;SOME LEFT -LOOP
                        ;
                        ;NEWKEY - SECOND HALF. KEYS DOWN
                        ;ARE ASSIGNED TO OUTPUT BUFFER
                        ;LOCATIONS WICH ARE STILL DE-
                        ;ACTIVATED
                        ;
0da2 : a210             NWKY	ldx	#$10	;NTABLE PNT/CNT
0da4 : a009             		ldy	#$09	;KTABLE PNT/CNT
0da6 : a940             NK1		lda	#$40	;PREPARE MASK
0da8 : 35cf             		and	NTBL,x	;NOTE TRIGGERED?
0daa : d00e             		bne	NK3		;YES -GO TO NEXT
0dac : 88               NK2		dey			;POINT NEXT KEY
0dad : f013             		beq	OUT		;NONE LEFT-LEAVE
0daf : b9df00           		lda	KTBL,y	;KEY NEEDS HOME?
0db2 : f0f8             		beq	NK2		;NO -GET NEXT
0db4 : 95cf             		sta	NTBL,x	;YES-PUT IN NOTE
0db6 : c6eb             		dec	OUTT	;ONE LESS OUTPUT
0db8 : f008             		beq	OUT		;NONE LEFT-LEAVE
0dba : 24e8             NK3		bit	CTRL	;ALTERNATE MODE?
0dbc : 1001             		bpl	SKP2	;NO -DEC ONCE
0dbe : ca               		dex			;YES-DEC TWICE
0dbf : ca               SKP2	dex			;POINT NEXT NOTE
0dc0 : d0e4             		bne	NK1		;SOME LEFT -LOOP
0dc2 : 60               OUT		rts			;RETURN
                        ;
                        ;       TRGN
                        ;TRANSIENT GENERATOR PROGRAM
                        
                        ;********************************
                        ;
                        ;
                        ;CTRL	=$00E8
00ba =                  ATCK	=$00BA
00bb =                  DCY		=$00BB
00bc =                  SUST	=$00BC
00bd =                  RLS		=$00BD
00be =                  PEAK	=$00BE
                        ;NTBL	=$00CF
00ce =                  PARM	=$00CE
                        ;TTBL	=$00BF
00be =                  CWRD	=$00BE
                        ;
                        ;       NTBL 00D0-00DF
                        ;       TTBL 00C0-00CF
                        ;
0dc3 : a5e8             TRGN	lda	CTRL	;DO TRANSIENTS?
0dc5 : 1038             		bpl	RTN1	;NO  -RETURN
0dc7 : a210             		ldx	#$10	;NTABLE PNT/CNT
                        ;
                        ;   A/D/S/R DETERMINATION
                        ;ROUTINE PREPARES Y TO USE AS
                        ;CONTROL WORD. GETS NOTE AND
                        ;SHIFTS TRIG.  TO CARRY.  GETS
                        ;CURRENT STATE (CS) PARAMETER.
                        ;IF NOTE TRIG.  NOT SET STATE IS
                        ;RELEASE.  IF CS PARA IS POSI-
                        ;TIVE STATE IS DECAY. SUSTAIN
                        ;OTHERWISE, STATE IS ATTACK
                        ;
0dc9 : a040             ADSR	ldy	#$40	;PREPARE CWRD
0dcb : b5cf             		lda	NTBL,x	;GET NOTE AND
0dcd : 2a               		rol	a		;ROTATE TRIGGER
0dce : 2a               		rol	a		;TO CARRY BIT
0dcf : b5ce             		lda	PARM,x	;NO TRIG? -RLS
0dd1 : 9019             		bcc	RELS	;CS>0? -DECAY/S
0dd3 : 100b             		bpl	DS
                        ;
                        ;   ATTACK ROUTINE
                        ;ADDS ATTACK PARAMETER TO CS PARA
                        ;AND IF GREATER THAN PEAK
                        ;SUBSTITUTES $#F AND SETS CONTROL
                        ;WORD TO $40 (D6 SET - NO GLIDE).
                        ;NOTE THAT CS PARA WILL BE >0
                        ;WHEN NEXT CHECKED.
                        ;
0dd5 : 18               ATTK	clc			;PREPARE
0dd6 : 65ba             		adc	ATCK	;ADD ATTACK PARA
0dd8 : c9bf             		cmp	#$BF	; >PEAK
0dda : 901b             		bcc	NEXT2	;NO -PLACE PARA.
0ddc : a5be             		lda	PEAK	;YES-PEAK VALUE
0dde : d017             		bne	NEXT2	;BRANCH ALWAYS
                        ;
                        ;   DECAY AND SUSTAIN ROUTINE
                        ;NOTE THAT CARRY IS SET.  DECAY
                        ;PARAMETER IS SUBTRACTED FROM
                        ;CURRENT STAT PARAMETER.  IF
                        ;RESULT IS LASS THAN SUSAIN
                        ;PARAMERE THEN SUST.  PARA.
                        ;BECOMES CURRENT STATE PARA.
                        ;D6 & D7 OF CONTROL WORD SET
                        ;
0de0 : a0c0             DS		ldy	#$C0	;PREPARE CWRD
0de2 : e5bb             		sbc	DCY		;SUBTRACT DCY
0de4 : c5bc             		cmp	SUST	;>SUSATIN?
0de6 : 100f             		bpl	NEXT2	;PLACE PARA
0de8 : a5bc             		lda	SUST	;CS PARA=SUST
0dea : 100b             		bpl	NEXT2	;PLACE PARA
                        ;
                        ;   RELEASE ROUTINE
                        ;MAKE SURE THAT CURRENT STATE
                        ;GLIDE BIT IS SET (NOTE-MAKES
                        ;CS NEGATIVE). SUBTRACTS RELEASE
                        ;PARA. FROM CURRENT STATE.  IF
                        ;RESULT >0. MAKES CS & CWRD =80
                        ;
0dec : 38               RELS	sec			;PREPARE
0ded : 0980             		ora	#$80	;SET CS GLIDE
0def : e5bd             		sbc	RLS		;SUBTRACT RLS
0df1 : 3004             		bmi	NEXT2	;CS<0 -PLACE CS
0df3 : a000             		ldy	#$00	;CS>0 -DONE MAKE
0df5 : a980             		lda	#$80	;CS=80; CWRD=0
                        ;
                        ;   NEXT
                        ;PLAVES CS PARA AND CWRD IN
                        ;PROPER CONTROL CHANNEL OUTPUTS
                        ;DECREMENTS POINTER (TWICE) AND
                        ;IF NOT YET DONE LOOPS FOR MORE
                        ;
0df7 : 94be             NEXT2	sty	CWRD,x	;PLACE CONTROL
0df9 : 95ce             		sta	PARM,x	;PLACE CS PARA
0dfb : ca               		dex			;DECREMENT POINT
0dfc : ca               		dex			;AND AGAIN
0dfd : d0ca             		bne	ADSR	;SOME LEFT -LOOP
0dff : 60               RTN1	rts			;RETURN
                        

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                ADSR : $0dc9           3529
                ATCK : $00ba            186   *
                ATTK : $0dd5           3541
                CLCK : $00bf            191   *
                CTRL : $00e8            232   *
                CWRD : $00be            190   *
                  DA : $0900           2304   *
                 DCY : $00bb            187   *
                DECD : $0f00           3840   *
                DISP : $0820           2080   *
                DLAY : $0d44           3396
                DONE : $0d6d           3437
                  DS : $0de0           3552
                FILL : $0d52           3410
                INIT : $0d21           3361
                INT0 : $0d23           3363
                INT1 : $0d26           3366
                 KBD : $0810           2064   *
                KTBL : $00df            223   *
                LAST : $00a9            169   *
                 LK0 : $0d69           3433
                 LK2 : $0d54           3412
                 LK3 : $0d59           3417
                 LK4 : $0d64           3428
                LOOK : $0d4e           3406
                LOOP : $0d03           3331
                 LP0 : $0d81           3457
                 LP1 : $0d9a           3482
               NEXT1 : $0d96           3478
               NEXT2 : $0df7           3575
                 NK1 : $0da6           3494
                 NK2 : $0dac           3500
                 NK3 : $0dba           3514
                NOTE : $0d2b           3371
                 NO0 : $0d2d           3373
                 NO1 : $0d46           3398
                 NO2 : $0d49           3401
                NTBL : $00cf            207   *
                NWKY : $0da2           3490
                ODLY : $00e9            233   *
                OPTN : $0d00           3328
                 OUT : $0dc2           3522
                OUTS : $00ea            234   *
                OUTT : $00eb            235   *
                PARM : $00ce            206   *
                PEAK : $00be            190   *
                POLY : $0d71           3441
                POL0 : $0d77           3447
                RELS : $0dec           3564
                 RLS : $00bd            189   *
                RTN1 : $0dff           3583
                  SH : $09ef           2543   *
                SKP1 : $0d9f           3487
                SKP2 : $0dbf           3519
                SUST : $00bc            188   *
                TBEG : $00bf            191   *
                TRGN : $0dc3           3523
                TTBL : $00bf            191   *